# 現状の構成であれば、おそらく terraform でコンテンツをアップロードすることも可能
# しかし本来インフラとコンテンツはライフサイクルが異なるので、両者を分離してコンテンツは　CI > aws cli でアップロードする形とした。

name: deploy

on:
  # testとdeployを同一workflow内の別jobとすることも可能だが、今回は別workflowとしている
  workflow_run:
    workflows: [test]
    types: [completed]
    branches: [main]
    

jobs:
  deploy-to-s3:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      id-token: write
      contents: read
    environment:
      name: production
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: install packages
        run: npm ci

      - name: build
        run: npm run build

      - name: sync
        # terraformでの値と一致している必要あり
        # build ディレクトリを 指定したバケットにアップロード
        # --delete で、同期元にないファイルを同期先から削除する
        run: aws s3 sync build s3://blogsvelte-production-39874962 --delete

      # キャッシュの無効化
      - name: Clear cache
        # terraformで作成したリソースと一致している必要あり
        run: aws lambda invoke --region us-east-1 --function-name blogSvelte-production-create_invalidation /dev/stdout